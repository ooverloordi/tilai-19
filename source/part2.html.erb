---
  title: Viikko 2
  exercise_page: true
  quiz_page: false
---
<% partial 'partials/material_heading' do %>
  Toisen viikon tehtävät
<% end %>

<% partial 'partials/material_sub_heading' do %>
  <a href="http://www.numpy.org/">NumPyn kotisivut</a>
<% end %>
<p>
NumPy on Pythonin perustavanlaatuinen kirjasto tieteellistä laskentaa varten. Tärkeimpiä ominaisuuksia NumPyssä ovat esimerkiksi lineaarialgebraan, Fourier-muunnoksiin ja satunnaislukuihin liittyvät työkalut.
<p>
Tarvitsemme NumPyä käytännössä heti kun haluamme ratkaista muuta kuin peruslaskutoimituksia. Esimerkiksi trigonometriset funktiot, exponenttifunktio, kompleksiluvut jne. ovat NumPy-kirjastossa.
</p>

<% partial 'partials/exercise', locals: { name: 'Trigonometry' } do %>

  <p>
    Käytä Numpy-modulia ja tulosta &#960;:n arvo,  sin(&#960;), cos(&#960;) ja tan(&#960;)<br>
    sekä luku 1, arcsin(1), arccos(1) ja arctan(1)
  </p>

  <% partial 'partials/sample_output' do %>
3.141592653589793
1.22464679915e-16
-1.0
-1.22464679915e-16
1
1.57079632679
0.0
0.785398163397
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Exponent and logarithms' } do %>

  <p>
    Käytä Numpy-modulia ja tulosta e:n arvo, ln(e), log<sub>10</sub>(e), log<sub>2</sub>(e)<br>
    sekä luku 2, e<sup>2</sup> ja e<sup>4*2</sup>
  </p>

  <% partial 'partials/sample_output' do %>
2.718281828459045
1.0
0.434294481903
1.44269504089
2
7.38905609893
2980.95798704
  <% end %>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Complex numbers' } do %>

  <p>
    Käytä Numpy-modulia ja määritä kompleksiluvut a = (0 + i)<sup>2</sup>, b = 1 + i, c = 2 + 3i ja tulosta ne.<br>
    Tulosta sen jälkeen d = b + c, d:n reaaliosa, imaginääriosa, argumentti ja kompleksikonjugaatti.
  </p>

  <% partial 'partials/sample_output' do %>
(-1+0j)
(1+1j)
(2+3j)
(3+4j)
3.0
4.0
0.927295218002
(3-4j)
  <% end %>
<% end %>

<% partial 'partials/exercise', locals: { name: 'Miscellaneous functions' } do %>

  <p>
    Käytä Numpy-modulia ja määritä luvut x = 9 ja y = -9.<br>
    Laske sen jälkeen luvusta x neliöjuuri, luvusta y itseisarvo, luvusta x kuutiojuuri ja luvusta y kuutiojuuri ja lopuksi tulosta ne. Vihje: numpy.sqrt ja numpy.cbrt jne...
  </p>

  <% partial 'partials/sample_output' do %>
3.0
9
2.08008382305
-2.08008382305
  <% end %>
<% end %>

<p>
Python sisältää itsessään syötteen käsittelyyn tarvittavan input-funktion. Inputin käyttö tapahtuu seuraavasti:
</p>
<% partial 'partials/code_highlight' do %>
  nimi = input("Kerro nimesi ")
  <% end %>

<p>
Ylläoleva koodi tuottaa seuraavan tulosteen:
</p>
<% partial 'partials/sample_output' do %>
Kerro nimesi
  <% end %>
<p>
Syöte tallennetaan muuttujaan nimi. Pythonissa input tulkitsee syötteen olevan tyyppiä string, eli sitä käyttäen ei voida esimerkiksi suoraan tallentaa numeroarvoja muuttujiin.
</p>
<% partial 'partials/exercise', locals: { name: 'Greeter' } do %>

  <p>
    Tee ohjelma, joka kysyy käyttäjältä hänen nimeään ja ikäänsä.<br>
    Nimen kysymisen jälkeen ohjelma tulostaa tekstin:
  </p>

  <% partial 'partials/sample_output' do %>
What is your name? Mikko
Nice to meet you Mikko!
  <% end %>
  <p>
    Vastaustekstin jälkeen ohjelma kysyy ikää ja tulostaa kokonaisen tervehdyksen.
  </p>

  <% partial 'partials/sample_output' do %>
Your age? 55
So, you are already 55 years old, Mikko!
<% end %>
  <p>
    Kokonaisuutena ohjelman tulostus näyttää siis seuraavalta
  </p>

  <% partial 'partials/sample_output' do %>
What is your name? Mikko
Nice to meet you Mikko!
Your age? 55
So, you are already 55 years old, Mikko!
  <% end %>
<% end %>

  <p>
    Inputin muuntaminen numeroarvoksi on todella yksinkertaista. Tarvitset siihen vain eval-komentoa.
  </p>

  <% partial 'partials/code_highlight' do %>
  arvo = eval(input("Anna luku "))
  <% end %>


<% partial 'partials/exercise', locals: { name: 'Calculator' } do %>

  <p>
    Tee ohjelma, missä kysyt käyttäjältä kaksi lukua. <br>
    Laske sen jälkeen näiden kahden luvun summa, tulo ja osamäärä.<br>
    Tulosta tulokset.
  </p>

  <% partial 'partials/sample_output' do %>
Give first integer 300
Give second integer 9001
9301
2700300
0.03332963004110654
  <% end %>

<p>
    Pythonissa jakojäännöksen selvittäminen onnistuu helpoiten modulo-operaattorilla. Modulo-operaattoria merkitään Pythonissa %-merkillä. Modulo-operaattori palauttaa suoraan jakojäännöksen.
  </p>

  <p>
Esimerkiksi 6%2 palauttaa 0.
  </p>
  <p>
Esimerkiksi 7%2 palauttaa 1.
  </p>

<% end %>

<% partial 'partials/exercise', locals: { name: 'Odd or even?' } do %>

  <p>
    Tee ohjelma, missä kysyt käyttäjältä luvun. <br>
    Tämän jälkeen ohjelma tulostaa oliko luku parillinen vai pariton.
  </p>

  <% partial 'partials/sample_output' do %>
Give a number to check 333
Number 333 is odd.
  <% end %>

  <% partial 'partials/sample_output' do %>
Give a number to check 222
Number 222 is even.
  <% end %>

<% end %>

<p>
Pythonissa on for-loopin lisäksi käytössä myös mm. while-loop. While loop toimii periaatteessa samalla tavalla kuin for, mutta se jatkaa toistoa niin kauan kuin sille määritelty ehto on totta. Puhutaan ns. "Condition-Controlled" ja "Collection-Controlled" loopeista.
</p>

<p>
Kokeillaan esimerkiksi seuraavaa koodia:
</p>

<% partial 'partials/code_highlight' do %>
n = 5
luku = 1

while luku <= n:
    print("huutista")
    luku += 1
  <% end %>

<p>
Ylläoleva ohjelma tulostaa seuraavan:

huutista
huutista
huutista
huutista
huutista
</p>


<% partial 'partials/sample_output' do %>
Summa välillä 1 - 100 on 5050
<% end %>

<p>
Ohjelmointitehtävissä törmää myös usein ongelmiin, joissa muuttujan on täytettävä tietty ehto, jotta jotain tapahtuu. Näitä kutsutaan if-lauseiksi. Python3:ssa if-lauseiden runko on seuraava:
</p>

<% partial 'partials/code_highlight' do %>
    if condition :
      indentedStatementBlock
  <% end %>

<p>
Lisäksi usein if-lauseita "jatketaan" else rakenteella, joka toimii samalla tavalla.
</p>

<% partial 'partials/code_highlight' do %>

    if condition :
      indentedStatementBlockForTrueCondition
    else:
      indentedStatementBlockForFalseCondition

  <% end %>
<p>
Luennolla käydään läpi vertailuoperaattorit:
</p>

<ul>
  <li>
    yhtäsuuri ==
  </li>
  <li>
    pienempi <
  </li>
  <li>
    suurempi >
  </li>
  <li>
    suurempi tai yhtäsuuri >=
  </li>
  <li>
    pienempi tai yhtäsuuri <=
  </li>
  <li>
    erisuuri !=
  </li>
</ul>
<% partial 'partials/exercise', locals: { name: 'Looping' } do %>

<p>
Tehtäväpohja näyttää seuraavalta
</p>
  <% partial 'partials/code_highlight' do %>
  def main():
    ####################################################
    arvattava = 42
    arvaukset = 0
    arvaus = 0
    ####################################################
    #############TEE TEHTÄVÄ TÄMÄN ALAPUOLELLE##########
  <% end %>

<p>
Tehtävänäsi on tehdä ohjelma joka lukee käyttäjältä arvauksen ja kertoo onko käyttäjän arvaama luku suurempi vai pienempi kuin arvattava luku. Lisäksi ohjelma laskee käyttäjän arvauksien määrän.
</p>

<% partial 'partials/sample_output' do %>
Arvaa luku 40
Lukuni on suurempi
Arvaa luku 44
Lukuni on pienempi
Arvaa luku 42
Arvasit oikein 3 arvauksella
<% end %>
<% end %>


<% partial 'partials/exercise', locals: { name: 'Sum' } do %>

<p>
Tee ohjelma, joka kysyy käyttäjältä kokonaisluvun. Tämän jälkeen ohjelma laskee kaikkien kokonaislukujen summan ykkösestä tähän käyttäjän antamaan lukuun, ja tulostaa tämän summan.
</p>

<% partial 'partials/sample_output' do %>
Anna kokonaisluku: 50
Summa välillä 1 - 50 on 1275
<% end %>
<% end %>


