---
  title: Viikko 3
  exercise_page: true
  quiz_page: false
---

<% partial 'partials/material_heading' do %>
  Kolmannen viikon tehtävät
<% end %>
<strong>Tehtävien palautus torstaina 14.11. klo 21:00 mennessä.</strong>

<p>
    Pythonissa jakojäännöksen selvittäminen onnistuu helpoiten modulo-operaattorilla. Modulo-operaattoria merkitään Pythonissa %-merkillä. Modulo-operaattori palauttaa suoraan jakojäännöksen.
  </p>

  <p>
Esimerkiksi 6%2 palauttaa 0.
  </p>
  <p>
Esimerkiksi 7%2 palauttaa 1.
  </p>

<% partial 'partials/exercise', locals: { name: 'Odd or even?' } do %>

  <p>
    Tee ohjelma, missä kysyt käyttäjältä luvun. <br>
    Tämän jälkeen ohjelma tulostaa oliko luku parillinen vai pariton.
  </p>

  <% partial 'partials/sample_output' do %>
Give a number to check 333
Number 333 is odd.
  <% end %>

  <% partial 'partials/sample_output' do %>
Give a number to check 222
Number 222 is even.
  <% end %>

<% end %>



<p>
Pythonissa on for-loopin lisäksi käytössä myös mm. while-loop. While loop toimii periaatteessa samalla tavalla kuin for, mutta se jatkaa toistoa niin kauan kuin sille määritelty ehto on totta. Puhutaan ns. "Condition-Controlled" ja "Collection-Controlled" loopeista.
</p>

<p>
Kokeillaan esimerkiksi seuraavaa koodia:
</p>

<% partial 'partials/code_highlight' do %>
n = 100
s = 0
luku = 1

while luku <= n:
    s = s + luku
    luku += 1

print("Summa välillä 1 - %d on %d" % (n,s))
  <% end %>

<p>
Ylläoleva ohjelma tulostaa seuraavan:
</p>


<% partial 'partials/sample_output' do %>
Summa välillä 1 - 100 on 5050
<% end %>

<p>
Ohjelmointitehtävissä törmää myös usein ongelmiin, joissa muuttujan on täytettävä tietty ehto, jotta jotain tapahtuu. Näitä kutsutaan if-lauseiksi. Python3:ssa if-lauseiden runko on seuraava:
</p>

<% partial 'partials/code_highlight' do %>
    if condition :
      indentedStatementBlock
  <% end %>

<p>
Lisäksi usein if-lauseita "jatketaan" else rakenteella, joka toimii samalla tavalla.
</p>

<% partial 'partials/code_highlight' do %>

    if condition :
      indentedStatementBlockForTrueCondition
    else:
      indentedStatementBlockForFalseCondition

  <% end %>
<p>
Luennolla käydään läpi vertailuoperaattorit:
</p>

<ul>
  <li>
    yhtäsuuri ==
  </li>
  <li>
    pienempi <
  </li>
  <li>
    suurempi >
  </li>
  <li>
    suurempi tai yhtäsuuri >=
  </li>
  <li>
    pienempi tai yhtäsuuri <=
  </li>
  <li>
    erisuuri !=
  </li>
</ul>
<% partial 'partials/exercise', locals: { name: 'Looping' } do %>

<p>
Tehtäväpohja näyttää seuraavalta
</p>
  <% partial 'partials/code_highlight' do %>
  def main():
    ####################################################
    arvattava = 42
    arvaukset = 0
    arvaus = 0
    ####################################################
    #############TEE TEHTÄVÄ TÄMÄN ALAPUOLELLE##########
  <% end %>

<p>
Tehtävänäsi on tehdä ohjelma joka lukee käyttäjältä arvauksen ja kertoo onko käyttäjän arvaama luku suurempi vai pienempi kuin arvattava luku. Lisäksi ohjelma laskee käyttäjän arvauksien määrän.
</p>

<% partial 'partials/sample_output' do %>
Arvaa luku 40
Lukuni on suurempi
Arvaa luku 44
Lukuni on pienempi
Arvaa luku 42
Arvasit oikein 3 arvauksella
<% end %>
<% end %>


<% partial 'partials/exercise', locals: { name: 'Random angle' } do %>

  <p>
    Tehtäväpohjassa on valmiiksi koodi joka arpoo ensin radiaaneja ja muuntaa sen tämän jälkeen kulmaksi. Kulmaluku voi siis olla yli yhden kierroksen. Tehtävänäsi on kirjoittaa valmiiksi annetun osuuden jälkeen koodi joka kertoo mihin yksikköympyrän neljännekseen arvottu kulma sijoittuu.
  </p>

  <% partial 'partials/sample_output' do %>
  Arvottu luku  0.33797175599533125
  on alueen (0,1) keskella
  Arvottu kulma = 337.97175599533125  astetta
  on 4. neljanneksessa
  <% end %>

 <% partial 'partials/sample_output' do %>
  Arvottu luku  0.09602578231894476
  on alueen (0,1) alussa
  Arvottu kulma = 96.02578231894476  astetta
  on 2. neljanneksessa
<% end %>

<% end %>


<p>
Vaikka Pythonissa on lukuisia kirjastoja, jotka tarjoavat valmiita ratkaisuja ongelmiin, monissa tieteellisen laskennan ongelmissa joudutaan tekemään omia funktioita. Myöhemmin tällä kurssilla toteutamme esimerkiksi niin kutsutun Rayleigh-testin datalle.
</p>

<p>
Pythonin funktiorakenne on yksinkertainen:
</p>

<% partial 'partials/code_highlight' do %>
def funktion_nimi(parametrit):
    funktionRakenneTänne
  <% end %>

<p>
Esimerkiksi funktio joka muuttaa Celsius-asteet Fahrenheiteiksi on seuraavanlainen:
</p>


<% partial 'partials/code_highlight' do %>
def fahrenheit(TCelsius):
    return (TCelsius * 9/5) + 32
  <% end %>

<p>
Mainissa fahrenheit-funktiota kutsuttaisiin esimerkiksi seuraavasti:
</p>

<% partial 'partials/code_highlight' do %>
def main():
    print(fahrenheit(12))
def fahrenheit(TCelsius):
    return (TCelsius * 9/5) + 32
  <% end %>

<p>
Huomaa, että tehtäväpohjissa nähty main on siis oikeasti myös funktio, joka sisältää pääohjelman!
</p>
  <p>
Funktion rakenne voi sisältää lähes mitä vain. Esimerkiksi for-, while- ja if-rakenteita.
</p>

<% partial 'partials/exercise', locals: { name: 'Factorial' } do %>

  <p>
    Main-ohjelmarungossa on valmiiksi komento print(factorial(12)). Tehtäväsi on kirjoittaa factorial(n)-funktio, joka laskee annetun luvun n kertoman ja palauttaa sen. Tulosta lopuksi mainissa oleva factorial(12).
  </p>

  <% partial 'partials/sample_output' do %>
  479001600
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Exponential function' } do %>

  <p>
    Main-ohjelmarungossa on valmiiksi komento print(exponential(1,100)). Tehtävänäsi on kirjoittaa funktio, joka laskee e<sup>x</sup>-funktion Taylorin sarjan arvon pisteessä x, n:n termin tarkkuudella. Mainissa oleva funktiokutsu siis tarkoittaa e<sup>1</sup> arvoa 100 termin tarkkuudella. Vinkki: käytä edellisessä tehtävässä luomaasi kertomafunktiota. Voit kutsua toista funktiota toisen sisällä aivan kuten kutsuisit sitä mainissakin.
  </p>

  <p>
  Taylorin sarja lasketaan e^x seuraavasti:
  <img src="https://raw.githubusercontent.com/materiaalit/tilai-18/master/source/maclaurin_ex03.gif" alt="e^x lauseke">
  </p>
  <% partial 'partials/sample_output' do %>
  2.7182818284590455
  <% end %>

<% end %>


<p>
Python3:n float-tyypillä on monia ominaisuuksia. Datan käsittelyssä tahdomme usein vähentää desimaaleja. Tutustu laajaan formatointiohjeeseen
<a href="http://www.python-course.eu/python3_formatted_output.php"target="_blank">täällä.</a>
</p>

<% partial 'partials/exercise', locals: { name: 'Format' } do %>

  <p>
  Seuraavaksi todella yksinkertainen harjoitus Pythonin float numeroiden formatista.
  Tehtäväpohja on seuraavanlainen:
  </p>

  <% partial 'partials/code_highlight' do %>
  def main():
    a = 2/3
    b = np.pi
    c = 11.123123123123
  <% end %>

  <p>
  Tehtävä on tehty oikein, kun tulostat:
  </p>

  <% partial 'partials/sample_output' do %>
0.67
3.1416
11.123
0.67 3.1416 11.123
  <% end %>

<% end %>

<p>
Mittauksista ja muista tutkimuksista saadaan usein isoja, jopa tuhansien rivien datatiedostoja. Näiden käsittelyyn Python3 on tehokas työkalu.
</p>

<p>
Datan käsittely tapahtuu Python3:ssa helpoiten file-tyyppisillä muuttujilla. Ensin määritellään, mitä tiedostoa käsitellään, kuinka sitä käsitellään ja miten käsittely jatkuu. Lopuksi tiedosto suljetaan, jottei se korruptoidu.
</p>

<% partial 'partials/code_highlight' do %>
  def main():
     file = open('input.dat', 'r')
  <% end %>

<p>
Ylläoleva komento avaa tiedoston input.dat ja asettaa sen lukutilaan. Lukutilassa voimme kätevästi siirtää datatiedoston arvoja muuttujiin.
</p>

<% partial 'partials/code_highlight' do %>
  def main():
     file = open('input.dat', 'r')
     tiedot = file.readlines()

     x = []
     y = []

     for rivi in tiedot:
        osarivi = rivi.split()
        x.append(float(osarivi[0]))
        y.append(float(osarivi[1]))
  <% end %>

<p>
Ylläoleva koodi siis avaa input.dat-tiedoston ja lukee siitä kaksi saraketta muuttujiin x ja y.
</p>

<p>
NumPy sisältää myös kätevän tiedoston luku ominaisuuden.
</p>

<% partial 'partials/code_highlight' do %>
  def main():
     infile = 'input.dat'

     x = np.loadtxt(infile, usecols=(0,))
     y = np.loadtxt(infile, usecols=(1,))
  <% end %>

<p>
Ylläolevalla komennolla käyttäjän ei tarvitse käydä dataa uudelleen for-loopilla läpi vaan se saadaan suoraan muuttujille.
</p>

<p>
Vastaavasti tiedostoon kirjoittaminen toimii lähes samalla tavalla.
</p>

<% partial 'partials/code_highlight' do %>
  def main():
     file = open('output.dat', 'w')
  <% end %>

<p>
Nyt olemme alustaneet output.dat-tiedoston ja määrittäneet että siihen tallennetaan tietoa. Seuraava vaihe riippuu täysin siitä mitä tiedostoon halutaan laittaa, mutta esimerkiksi lukujen kirjoitus tapahtuisi seuraavasti:
</p>

<% partial 'partials/code_highlight' do %>
     file = open('output.dat', 'w')
     i = 0
     while (i < len(x)):
        file.write("%6.2f\n"%(x[i]))
        i++
    file.close()
  <% end %>

  <p>
Tämä koodi kirjoittaa kuvitellun muuttujan x listan kokonaisuudessaan output.dat-tiedostoon, siten että luvut ovat allekkain.
  </p>


  <% partial 'partials/exercise', locals: { name: 'Find' } do %>

        <p>
        Tehtäväpohja on seuraavanlainen:
        </p>

        <% partial 'partials/code_highlight' do %>
        def main():
              lista=[]
        #Tee tehtävä tähän

        ###################################
        print(lista)

        <% end %>

        <p>
        Tehtävän mukana tulee tiedosto model.dat. Tehtävänäsi löytää datasta rivi, missä on D-sarakkeessa luku 25 (25. päivä) ja siirtää se annettuun lista muuttujaan. Tehtävä on oikein, kun listassa on seuraava rivi:
        </p>

        <% partial 'partials/sample_output' do %>
['2454399.48 2007 10 25 23 35']
        <% end %>

      <% end %>


  <% partial 'partials/exercise', locals: { name: 'Data handling' } do %>

  <p>
  Tehtäväpohjassa tulee mukana input.dat-tiedosto. Tehtävänäsi on lukea input.dat-tiedosto ja luoda output.dat-tiedosto, joka on valmiiksi LaTeX-taulukko muotoa. Output.dat-tiedostossa pitää olla yhdellä rivillä 8 lukua ja rivejä pitäisi olla 25. Tehtävä on oikein, kun output.dat-tiedosto näyttää seuraavalta:
  </p>

  <% partial 'partials/sample_output' do %>
  0.01  &  7.73  &  1.20  &  7.69  &  2.05  &  7.72  &  3.13  &  7.69  \\
  4.16  &  7.69  &  5.03  &  7.70  &  5.14  &  7.71  &  5.17  &  7.73  \\
  ...
  <% end %>

  <p>
  Huomaa, että testien läpäisemiseksi rivien tulee olla tarkalleen esimerkin mukaisessa formaatissa (jokaiselle luvulle on varattu kahdeksan merkin tila, luvun jälkeen kaksi välilyöntiä ennen &-merkkiä).

<% end %>


<% partial 'partials/exercise', locals: { name: 'More data' } do %>

  <p>
  Tehtäväpohjassa tulee mukana input.dat-tiedosto. Tehtävänäsi on lukea tämä tiedosto, jossa on 528 riviä, ja luoda output.dat-tiedosto, joka on valmiiksi LaTeX-taulukon muodossa. Output.dat-tiedostossa on 50 riviä. Ensimmäisessä sarakkeessa ovat 50 ensimmäistä ajanhetken arvoa t kahden desimaalin tarkkuudella. Toisessa sarakkeessa on taas seuraavat 50 arvoa jne. Viimeisessä 11. sarakkeessa on 28 arvoa, sillä data loppuu kesken. Tehtävä on oikein, kun output.dat-tiedosto näyttää seuraavalta:
  </p>

  <p>
  Kolme ensimmäistä riviä
  </p>
  <% partial 'partials/sample_output' do %>

   1.08  &  31.26  &  65.09  &  97.47  & 128.28  & 156.09  & 190.26  & 239.08  & 274.36  & 314.07  & 346.38  \\
   1.24  &  31.43  &  65.27  &  98.09  & 128.47  & 156.27  & 190.43  & 239.23  & 277.07  & 314.22  & 347.38  \\
   1.40  &  32.09  &  65.46  &  98.28  & 132.09  & 156.46  & 191.09  & 239.38  & 277.22  & 314.36  & 348.08  \\

  <% end %>
  <p>
  Kolme viimeistä riviä
  </p>

<% partial 'partials/sample_output' do %>

  29.25  &  62.09  &  94.47  & 127.28  & 154.09  & 188.26  & 238.08  & 272.36  & 308.07  & 345.38  &  \\
  29.43  &  62.27  &  97.09  & 127.47  & 154.28  & 188.43  & 238.23  & 274.07  & 308.22  & 346.08  &  \\
  31.09  &  62.45  &  97.28  & 128.09  & 154.46  & 190.09  & 238.38  & 274.22  & 308.36  & 346.23  &  \\

 <% end %>

Kiinnitä tässäkin tehtävässä erityistä huomiota tulosteen formaattiin. Nyt jokaiselle luvulle varattu tila on yhteensä yhdeksän merkkiä.

<% end %>


